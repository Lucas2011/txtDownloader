ÂäüËÉΩË¶ÅÊ±ÇÔºö
	1.	‰ªéÂêéÂè∞ÊúçÂä°Âô®ÊãâÂèñÁî®Êà∑‰ø°ÊÅØÂàóË°®ÔºàJSONÔºâ„ÄÇ
	‚Ä¢	‰ΩøÁî®ÂºÇÊ≠•ÁΩëÁªúËØ∑Ê±ÇÔºåÈÅøÂÖçÈòªÂ°û‰∏ªÁ∫øÁ®ã„ÄÇ
	2.	Â∞ÜÁî®Êà∑Êï∞ÊçÆÂêåÊ≠•Âà∞ Core Data ‰∏≠„ÄÇ
	‚Ä¢	Â¶ÇÊûúÁî®Êà∑Â∑≤Â≠òÂú®ÔºàÈÄöËøá id ÂåπÈÖçÔºâÔºåÊõ¥Êñ∞ÂÖ∂ name Â≠óÊÆµ„ÄÇ
	‚Ä¢	Â¶ÇÊûú‰∏çÂ≠òÂú®ÔºåÂèØÂøΩÁï•ÊàñÊèíÂÖ•Ôºà‰∏çÂº∫Âà∂Ë¶ÅÊ±ÇÔºâ„ÄÇ
	‚Ä¢	Ë¶ÅÊ±ÇÁ∫øÁ®ãÂÆâÂÖ®ÔºöÊâÄÊúâ Core Data Êìç‰Ωú‰∏çËÉΩÈÄ†ÊàêÂ¥©Ê∫ÉÊàñÊï∞ÊçÆÂÜ≤Á™Å„ÄÇ
	3.	‰ªªÂä°ÂÆåÊàêÂêéÈÄöÁü•‰∏ªÁ∫øÁ®ãÂà∑Êñ∞ UIÔºà‰æãÂ¶ÇÈÄöËøáÂõûË∞É„ÄÅÈÄöÁü•Êàñ delegateÔºâ„ÄÇ
	4.	Âπ∂ÂèëÊéßÂà∂ÔºöÂêå‰∏ÄÊó∂Èó¥Âè™ÂÖÅËÆ∏Êúâ‰∏Ä‰∏™ÂêåÊ≠•‰ªªÂä°ËøêË°å„ÄÇ
	‚Ä¢	ËøûÁª≠Â§öÊ¨°ÁÇπÂáª‚ÄúÂà∑Êñ∞‚ÄùÊåâÈíÆ‰∏ç‰ºöËß¶ÂèëÂ§ö‰∏™Âπ∂ÂèëÂêåÊ≠•„ÄÇ

import Foundation
import CoreData
import UIKit

class UserSyncService {

    static let shared = UserSyncService()

    private let persistentContainer: NSPersistentContainer
    private let syncQueue = DispatchQueue(label: "com.company.user.sync.queue", qos: .background)
    private let semaphore = DispatchSemaphore(value: 1)  // ÊéßÂà∂ÂêåÊó∂Âè™ÂÖÅËÆ∏ 1 ‰∏™ÂêåÊ≠•‰ªªÂä°

    private init() {
        persistentContainer = (UIApplication.shared.delegate as! AppDelegate).persistentContainer
    }

    // MARK: - Public API

    func startSync(completion: (() -> Void)? = nil) {
        syncQueue.async { [weak self] in
            guard let self = self else { return }

            // üîí ‰ø°Âè∑ÈáèÊéßÂà∂Âπ∂Âèë
            let waitResult = self.semaphore.wait(timeout: .now())
            guard waitResult == .success else {
                print("‚è≥ Sync already in progress, skipping new request.")
                return
            }

            print("üöÄ Starting user sync task...")

            self.fetchUserJSON { jsonList in
                self.syncToCoreData(jsonList: jsonList)

                // ÈÄöÁü•‰∏ªÁ∫øÁ®ã
                DispatchQueue.main.async {
                    NotificationCenter.default.post(name: .userSyncCompleted, object: nil)
                    completion?()
                }

                // ‚úÖ ‰ø°Âè∑ÈáèÈáäÊîæ
                self.semaphore.signal()
            }
        }
    }

    // MARK: - Private Helpers

    private func fetchUserJSON(completion: @escaping ([[String: Any]]) -> Void) {
        // Ê®°ÊãüÁΩëÁªúËØ∑Ê±Ç
        DispatchQueue.global().asyncAfter(deadline: .now() + 1.0) {
            let dummyJSON: [[String: Any]] = [
                [
                    "id": "6F9619FF-8B86-D011-B42D-00C04FC964FF",
                    "name": "Alice Updated",
                    "email": "alice@updated.com"
                ],
                [
                    "id": "7A29AAFC-5FBB-4BAE-81B0-3BA2B12F1A59",
                    "name": "Bob Updated",
                    "email": "bob@updated.com"
                ]
            ]
            completion(dummyJSON)
        }
    }

    private func syncToCoreData(jsonList: [[String: Any]]) {
        let context = persistentContainer.newBackgroundContext()
        context.automaticallyMergesChangesFromParent = true

        context.performAndWait {
            for json in jsonList {
                guard let idStr = json["id"] as? String,
                      let id = UUID(uuidString: idStr) else { continue }

                let fetch: NSFetchRequest<User> = User.fetchRequest()
                fetch.predicate = NSPredicate(format: "id == %@", id as CVarArg)
                fetch.fetchLimit = 1

                let user: User
                if let existing = try? context.fetch(fetch).first {
                    user = existing
                } else {
                    user = User(context: context)
                    user.id = id
                }

                user.name = json["name"] as? String
                user.email = json["email"] as? String
            }

            do {
                try context.save()
                print("‚úÖ Core Data write success.")
            } catch {
                print("‚ùå Core Data error: \(error)")
            }
        }
    }
}

// MARK: - ÈÄöÁü•ÂêçÂÆö‰πâ

extension Notification.Name {
    static let userSyncCompleted = Notification.Name("UserSyncCompletedNotification")
}